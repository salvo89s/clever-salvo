package org.clever.administration.commands;

/**
 *
 * @author Maurizio Paone
 */


/**Command for testing purposes
*/

/*
 *  Copyright (c) 2011 Antonio Nastasi
 *
 *  Permission is hereby granted, free of charge, to any person
 *  obtaining a copy of this software and associated documhentation
 *  files (the "Software"), to deal in the Software without
 *  restriction, including without limitation the rights to use,
 *  copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following
 *  conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 */


import java.util.ArrayList;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Options;
import org.clever.Common.Exceptions.CleverException;
import org.clever.Common.XMPPCommunicator.ConnectionXMPP;
import org.clever.administration.ClusterManagerAdministrationTools;



public class TestMethodsCommand  extends CleverCommand
{

  @Override
  public Options getOptions()
  {
    Options options = new Options();
    options.addOption( "h", true, "The name of the Host Target" );
    options.addOption( "a", true, "Agent target for the method invocation " );
    options.addOption( "m", true, "Method to be invoked" );
    options.addOption( "xml", false, "Displays the XML request/response Messages." );
    options.addOption( "debug", false, "Displays debug information." );
    return options;
  }



  @Override
  public void exec( CommandLine commandLine )
  {
    try
    {

          String target = commandLine.getOptionValue( "h" );
          String agentTarget = commandLine.getOptionValue( "a" );
          String method = commandLine.getOptionValue( "m" );
          System.out.println( "invoking "+method+" of the "+agentTarget+" agent");
          Object returnResponse = ClusterManagerAdministrationTools.instance().execSyncAdminCommand( this, target, agentTarget, method, new ArrayList(), commandLine.hasOption( "xml" ) );
          System.out.println( "Response: "+returnResponse.toString());
          //Object returnResponse = (  )ClusterManagerAdministrationTools.instance().execSyncAdminCommand( this, target, "MonitorAgent", command, new ArrayList(), commandLine.hasOption( "xml" ) );
          
    }
    catch( CleverException ex )
    {
      System.out.println( "Exception: "+ex.getMessage());
      logger.error( "from testcommand: "+ex );
    }

  }



  @Override
  public void handleMessage( Object response )
  {
    if(response instanceof Exception)
    {
        System.out.println( "\nException received: " );
        ((Exception)response).printStackTrace() ;
        return;
    }
    System.out.println( "\nResponse received: " );
    System.out.println( response.toString() );
    
  }
}
